// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stock/stock.proto

package stock

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on AllMarketsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AllMarketsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMarkets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllMarketsReplyValidationError{
					field:  fmt.Sprintf("Markets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AllMarketsReplyValidationError is the validation error returned by
// AllMarketsReply.Validate if the designated constraints aren't met.
type AllMarketsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllMarketsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllMarketsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllMarketsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllMarketsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllMarketsReplyValidationError) ErrorName() string { return "AllMarketsReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllMarketsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllMarketsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllMarketsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllMarketsReplyValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Account) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Balance

	// no validation rules for AvgByPrice

	// no validation rules for TotalPrice

	return nil
}

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on AccountRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Account

	return nil
}

// AccountRequestValidationError is the validation error returned by
// AccountRequest.Validate if the designated constraints aren't met.
type AccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountRequestValidationError) ErrorName() string { return "AccountRequestValidationError" }

// Error satisfies the builtin error interface
func (e AccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountRequestValidationError{}

// Validate checks the field values on AccountReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccountReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Info

	return nil
}

// AccountReplyValidationError is the validation error returned by
// AccountReply.Validate if the designated constraints aren't met.
type AccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountReplyValidationError) ErrorName() string { return "AccountReplyValidationError" }

// Error satisfies the builtin error interface
func (e AccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountReplyValidationError{}

// Validate checks the field values on TickRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TickRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Codes

	return nil
}

// TickRequestValidationError is the validation error returned by
// TickRequest.Validate if the designated constraints aren't met.
type TickRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TickRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TickRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TickRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TickRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TickRequestValidationError) ErrorName() string { return "TickRequestValidationError" }

// Error satisfies the builtin error interface
func (e TickRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTickRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TickRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TickRequestValidationError{}

// Validate checks the field values on TickReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TickReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Price

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TickReplyValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Volume

	return nil
}

// TickReplyValidationError is the validation error returned by
// TickReply.Validate if the designated constraints aren't met.
type TickReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TickReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TickReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TickReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TickReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TickReplyValidationError) ErrorName() string { return "TickReplyValidationError" }

// Error satisfies the builtin error interface
func (e TickReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTickReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TickReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TickReplyValidationError{}

// Validate checks the field values on ChartRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChartRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChartRequestValidationError is the validation error returned by
// ChartRequest.Validate if the designated constraints aren't met.
type ChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartRequestValidationError) ErrorName() string { return "ChartRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartRequestValidationError{}

// Validate checks the field values on ChartReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ChartReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChartReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ChartReplyValidationError is the validation error returned by
// ChartReply.Validate if the designated constraints aren't met.
type ChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartReplyValidationError) ErrorName() string { return "ChartReplyValidationError" }

// Error satisfies the builtin error interface
func (e ChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartReplyValidationError{}

// Validate checks the field values on AccountsReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccountsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountsReplyValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AccountsReplyValidationError is the validation error returned by
// AccountsReply.Validate if the designated constraints aren't met.
type AccountsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountsReplyValidationError) ErrorName() string { return "AccountsReplyValidationError" }

// Error satisfies the builtin error interface
func (e AccountsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountsReplyValidationError{}

// Validate checks the field values on BuyRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BuyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Otype

	// no validation rules for Volume

	// no validation rules for Price

	return nil
}

// BuyRequestValidationError is the validation error returned by
// BuyRequest.Validate if the designated constraints aren't met.
type BuyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyRequestValidationError) ErrorName() string { return "BuyRequestValidationError" }

// Error satisfies the builtin error interface
func (e BuyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyRequestValidationError{}

// Validate checks the field values on BuyReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BuyReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for AvgPrice

	// no validation rules for Volume

	// no validation rules for Fee

	// no validation rules for Price

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuyReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BuyReplyValidationError is the validation error returned by
// BuyReply.Validate if the designated constraints aren't met.
type BuyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyReplyValidationError) ErrorName() string { return "BuyReplyValidationError" }

// Error satisfies the builtin error interface
func (e BuyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyReplyValidationError{}

// Validate checks the field values on SellRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SellRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Otype

	// no validation rules for Volume

	// no validation rules for Price

	return nil
}

// SellRequestValidationError is the validation error returned by
// SellRequest.Validate if the designated constraints aren't met.
type SellRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SellRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SellRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SellRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SellRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SellRequestValidationError) ErrorName() string { return "SellRequestValidationError" }

// Error satisfies the builtin error interface
func (e SellRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSellRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SellRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SellRequestValidationError{}

// Validate checks the field values on SellReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SellReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for AvgPrice

	// no validation rules for Volume

	// no validation rules for Fee

	// no validation rules for Price

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SellReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SellReplyValidationError is the validation error returned by
// SellReply.Validate if the designated constraints aren't met.
type SellReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SellReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SellReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SellReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SellReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SellReplyValidationError) ErrorName() string { return "SellReplyValidationError" }

// Error satisfies the builtin error interface
func (e SellReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSellReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SellReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SellReplyValidationError{}

// Validate checks the field values on ChartData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ChartData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Open

	// no validation rules for High

	// no validation rules for Low

	// no validation rules for Close

	// no validation rules for Volume

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartDataValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChartDataValidationError is the validation error returned by
// ChartData.Validate if the designated constraints aren't met.
type ChartDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartDataValidationError) ErrorName() string { return "ChartDataValidationError" }

// Error satisfies the builtin error interface
func (e ChartDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartDataValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Order) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Side

	// no validation rules for Type

	// no validation rules for Code

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Fee

	// no validation rules for State

	// no validation rules for Volume

	// no validation rules for Price

	// no validation rules for TradeCount

	return nil
}

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderListReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderListReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrder() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderListReplyValidationError{
					field:  fmt.Sprintf("Order[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OrderListReplyValidationError is the validation error returned by
// OrderListReply.Validate if the designated constraints aren't met.
type OrderListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListReplyValidationError) ErrorName() string { return "OrderListReplyValidationError" }

// Error satisfies the builtin error interface
func (e OrderListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListReplyValidationError{}

// Validate checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CancelOrderRequestValidationError is the validation error returned by
// CancelOrderRequest.Validate if the designated constraints aren't met.
type CancelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderRequestValidationError) ErrorName() string {
	return "CancelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderRequestValidationError{}

// Validate checks the field values on OrderBookStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrderBookStreamRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OrderBookStreamRequestValidationError is the validation error returned by
// OrderBookStreamRequest.Validate if the designated constraints aren't met.
type OrderBookStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderBookStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderBookStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderBookStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderBookStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderBookStreamRequestValidationError) ErrorName() string {
	return "OrderBookStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderBookStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderBookStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderBookStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderBookStreamRequestValidationError{}

// Validate checks the field values on OrderBookStreamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrderBookStreamReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OrderBookStreamReplyValidationError is the validation error returned by
// OrderBookStreamReply.Validate if the designated constraints aren't met.
type OrderBookStreamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderBookStreamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderBookStreamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderBookStreamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderBookStreamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderBookStreamReplyValidationError) ErrorName() string {
	return "OrderBookStreamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OrderBookStreamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderBookStreamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderBookStreamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderBookStreamReplyValidationError{}

// Validate checks the field values on TradeStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TradeStreamRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TradeStreamRequestValidationError is the validation error returned by
// TradeStreamRequest.Validate if the designated constraints aren't met.
type TradeStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TradeStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TradeStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TradeStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TradeStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TradeStreamRequestValidationError) ErrorName() string {
	return "TradeStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TradeStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTradeStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TradeStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TradeStreamRequestValidationError{}

// Validate checks the field values on TradeStreamReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TradeStreamReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Price

	// no validation rules for Volume

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TradeStreamReplyValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Askbit

	return nil
}

// TradeStreamReplyValidationError is the validation error returned by
// TradeStreamReply.Validate if the designated constraints aren't met.
type TradeStreamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TradeStreamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TradeStreamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TradeStreamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TradeStreamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TradeStreamReplyValidationError) ErrorName() string { return "TradeStreamReplyValidationError" }

// Error satisfies the builtin error interface
func (e TradeStreamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTradeStreamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TradeStreamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TradeStreamReplyValidationError{}

// Validate checks the field values on AllMarketsReply_Market with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AllMarketsReply_Market) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Name

	return nil
}

// AllMarketsReply_MarketValidationError is the validation error returned by
// AllMarketsReply_Market.Validate if the designated constraints aren't met.
type AllMarketsReply_MarketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllMarketsReply_MarketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllMarketsReply_MarketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllMarketsReply_MarketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllMarketsReply_MarketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllMarketsReply_MarketValidationError) ErrorName() string {
	return "AllMarketsReply_MarketValidationError"
}

// Error satisfies the builtin error interface
func (e AllMarketsReply_MarketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllMarketsReply_Market.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllMarketsReply_MarketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllMarketsReply_MarketValidationError{}
