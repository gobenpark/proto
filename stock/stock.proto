syntax = "proto3";

option go_package = "github.com/gobenpark/proto/stock";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


service Stock {
  rpc AllMarkets(google.protobuf.Empty) returns (AllMarketsReply){}
  //특정 소유하고 있는 주식,코인 정보
  rpc Account(AccountRequest) returns (AccountReply) {}
  rpc TickStream(TickRequest) returns (stream TickReply) {}
  rpc Chart(ChartRequest) returns (ChartReply) {}
  //모든 소유하고 있는 주식, 코인정보
  rpc Position(google.protobuf.Empty) returns (PositionReply) {}
  rpc Buy(BuyRequest) returns (BuyReply){}
  rpc Sell(SellRequest) returns (SellReply){}
  rpc OrderList(google.protobuf.Empty) returns (OrderListReply){}
  rpc CancelOrder(CancelOrderRequest) returns (google.protobuf.Empty){}
  rpc TradeStream(TradeStreamRequest) returns (stream TradeStreamReply) {}
  rpc OrderBookStream(OrderBookStreamRequest) returns (stream OrderBookStreamReply) {}

  rpc OrderState(OrderStateRequest) returns (OrderStateReply) {}
  rpc OrderEventStream(google.protobuf.Empty) returns (stream OrderEventStreamReply) {}
}


enum OrderType{
  MarketOrder = 0;
  LimitOrder = 1;
}

message AllMarketsReply {
  message Market {
    string code = 1;
    string name = 2;
  }
  repeated Market markets = 1;
}

message Account {
  string code = 1;
  double balance = 2;
  double avgByPrice = 3;
  double totalPrice = 4;
}

message AccountRequest {
  string account = 1;
}

message AccountReply {
  string info = 1;
}

message TickRequest {
  string codes = 1;
}

message TickReply{
  double price = 1;
  google.protobuf.Timestamp date = 2;
  double volume = 3;
}

message ChartRequest {
  string code = 1;
  google.protobuf.Timestamp to = 2;
}

message ChartReply {
  repeated ChartData data = 1;
}


message Position {
  string code = 1;
  double price = 2;
  double amount = 3;
  google.protobuf.Timestamp date = 4;
}

message PositionReply{
  repeated Position positions = 1;
}


message BuyRequest {
  string code = 1;
  OrderType otype = 2;
  double volume = 3;
  double price = 4;
  string identifier = 5;
}

message BuyReply {
  string id = 1;
  string code = 2;
  double avgPrice = 3;
  double volume = 4;
  double fee = 5;
  double price = 6;
  google.protobuf.Timestamp createdAt = 7;
}

message SellRequest{
  string code = 1;
  OrderType otype = 2;
  double volume = 3;
  double price = 4;
  string identifier = 5;
}

message SellReply {
  string id = 1;
  string code = 2;
  double avgPrice = 3;
  double volume = 4;
  double fee = 5;
  double price = 6;
  google.protobuf.Timestamp createdAt = 7;
}

message ChartData {
  double open = 1;
  double high = 2;
  double low = 3;
  double close = 4;
  double volume = 5;
  google.protobuf.Timestamp date = 6;
}


message Order {
  enum Side {
    //매도
    Ask = 0;
    //매수
    Bid = 1;
  }

  string id = 1;
  //주문종류
  Side side = 2;
  OrderType type = 3;
  string code = 4;
  google.protobuf.Timestamp createdAt = 5;
  double fee = 6;
  string state = 7;
  double volume = 8;
  double price = 9;
  //해당 주문에 걸린 체결 수
  double tradeCount = 10;
}

message OrderListReply {
  repeated Order order = 1;
}

message CancelOrderRequest{
  string id = 1;
}

message OrderBookStreamRequest {
  repeated string codes = 1;
}

message OrderBookStreamReply {

}

message TradeStreamRequest {
  repeated string codes = 1;
}

message TradeStreamReply {
  string code = 1;
  double price = 2;
  double volume = 3;
  google.protobuf.Timestamp date = 4;
  string askbit = 5;
}

message OrderEventStreamReply{
  Order order = 1;
}

message OrderStateRequest {
  string id = 1;
}

message OrderStateReply {
  Order order = 1;
}